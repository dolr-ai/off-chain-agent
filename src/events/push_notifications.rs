use crate::app_state::AppState;
use anyhow::Result;
use candid::Principal;
use serde_json::Value;
use yral_spacetime_bindings::autogenerated::backend::{
    LikedPayload, NotificationType, VideoUploadPayload,
};

pub async fn dispatch_notif(
    event_type: &str, // todo make this an enum
    params: Value,
    app_state: &AppState,
) -> Result<(), Box<dyn std::error::Error>> {
    match event_type {
        // LikeVideo
        "like_video" => {
            let target_principal = params["publisher_user_id"].as_str().unwrap();
            let like_count = params["like_count"].as_u64().unwrap();
            let liker_name = params["display_name"].as_str().unwrap_or("A YRAL user");
            // Notify yral metadata

            let notification_type = NotificationType::Liked(LikedPayload {
                creator_canister_id: params["canister_id"].as_str().unwrap().to_string(),
                by_user_principal: params["user_id"].as_str().unwrap().to_string(),
                post_id: params["post_id"].as_u64().unwrap(),
            });

            app_state
                .notification_store_ctx
                .add(
                    Principal::from_text(params["principal"].as_str().unwrap()).unwrap(),
                    notification_type,
                )
                .await?;
        }
        // VideoUploadSuccessful
        "video_upload_successful" => {
            let target_principal = params["user_id"].as_str().unwrap();
            // Notify yral metadata

            let notification_type = NotificationType::VideoUpload(VideoUploadPayload {
                creator_canister_id: params["canister_id"].as_str().unwrap().to_string(),
                video_id: params["video_id"].as_u64().unwrap(),
            });

            app_state
                .notification_store_ctx
                .add(
                    Principal::from_text(target_principal).unwrap(),
                    notification_type,
                )
                .await?;
        }
        _ => {}
    }
    Ok(())
}
