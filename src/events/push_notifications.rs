use crate::{
    app_state::AppState,
    events::types::{deserialize_event_payload, EventPayload},
};
use anyhow::Result;
use candid::Principal;
use serde_json::Value;
use yral_spacetime_bindings::autogenerated::backend::{
    LikedPayload, NotificationType, VideoUploadPayload,
};

pub async fn dispatch_notif(
    event_type: &str, // todo make this an enum
    params: Value,
    app_state: &AppState,
) -> Result<(), Box<dyn std::error::Error>> {
    let event = deserialize_event_payload(event_type, params)?;
    match event {
        EventPayload::VideoUploadSuccessful(payload) => {
            // send to fcm

            app_state
                .notification_store_ctx
                .add(
                    payload.publisher_user_id,
                    NotificationType::VideoUpload(VideoUploadPayload {
                        video_id: payload.post_id,
                    }),
                )
                .await??;
        }
        EventPayload::LikeVideo(payload) => {
            // send to fcm
            
            app_state
                .notification_store_ctx
                .add(
                    payload.publisher_user_id,
                    NotificationType::Liked(LikedPayload {
                        by_user_principal: payload.user_id.to_text(),
                        post_id: payload.post_id,
                    }),
                )
                .await??;
        }
        _ => {}
    }
    Ok(())
}
